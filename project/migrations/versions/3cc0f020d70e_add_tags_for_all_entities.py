"""add tags for all entities

Revision ID: 3cc0f020d70e
Revises: b78f0a4a97e5
Create Date: 2025-07-06 13:01:27.826025

"""
from alembic import op
import sqlmodel
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '3cc0f020d70e'
down_revision = 'b78f0a4a97e5'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tag',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('category', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tag', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('devicetaglink',
    sa.Column('device_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['device_id'], ['device.device_id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], ),
    sa.PrimaryKeyConstraint('device_id', 'tag_id')
    )
    op.create_table('hardwarerevisiontaglink',
    sa.Column('hardware_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['hardware_id'], ['hardwarerevision.hardware_id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], ),
    sa.PrimaryKeyConstraint('hardware_id', 'tag_id')
    )
    op.create_table('softwareversiontaglink',
    sa.Column('software_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['software_id'], ['softwareversion.software_id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], ),
    sa.PrimaryKeyConstraint('software_id', 'tag_id')
    )
    op.create_table('sensormetrictaglink',
    sa.Column('sensor_metric_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['sensor_metric_id'], ['sensormetric.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], ),
    sa.PrimaryKeyConstraint('sensor_metric_id', 'tag_id')
    )
    op.create_unique_constraint(None, 'device', ['name'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'device', type_='unique')
    op.drop_table('sensormetrictaglink')
    op.drop_table('softwareversiontaglink')
    op.drop_table('hardwarerevisiontaglink')
    op.drop_table('devicetaglink')
    op.drop_table('tag')
    # ### end Alembic commands ###
